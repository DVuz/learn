'use client';

import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  ChevronDown,
  ChevronUp,
  Code,
  Play,
  Copy,
  BookOpen,
  Lightbulb,
  Target,
  HelpCircle,
  Settings,
} from 'lucide-react';
import JSLayout from '../components/JSLayout';
import { JS_TABLE_OF_CONTENTS, JS_NAVIGATIONS, getProgressForLesson } from '../constants/jsData';

interface FAQ {
  id: number;
  question: string;
  answer: string;
  level: 'junior' | 'mid' | 'senior';
  category: 'basic' | 'syntax' | 'best-practices' | 'debugging' | 'performance';
}

const navigation = JS_NAVIGATIONS['variable-basics'] || {};
const progress = getProgressForLesson('variable-basics');

const variableFAQs: FAQ[] = [
  {
    id: 1,
    question: 'Bi·∫øn l√† g√¨ v√† t·∫°i sao c·∫ßn s·ª≠ d·ª•ng bi·∫øn?',
    answer:
      'Bi·∫øn l√† "container" c√≥ t√™n ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu. Ch√∫ng ta c·∫ßn bi·∫øn ƒë·ªÉ: l∆∞u tr·ªØ th√¥ng tin t·∫°m th·ªùi, t√°i s·ª≠ d·ª•ng gi√° tr·ªã, th·ª±c hi·ªán t√≠nh to√°n, ƒëi·ªÅu khi·ªÉn lu·ªìng ch∆∞∆°ng tr√¨nh. Bi·∫øn gi√∫p code d·ªÖ ƒë·ªçc, b·∫£o tr√¨ v√† linh ho·∫°t h∆°n.',
    level: 'junior',
    category: 'basic',
  },
  {
    id: 2,
    question: 'S·ª± kh√°c bi·ªát gi·ªØa var, let v√† const?',
    answer:
      'var: function-scoped, c√≥ hoisting, c√≥ th·ªÉ redeclare. let: block-scoped, c√≥ hoisting nh∆∞ng temporal dead zone, kh√¥ng th·ªÉ redeclare. const: block-scoped, ph·∫£i initialize khi declare, kh√¥ng th·ªÉ reassign (nh∆∞ng object/array v·∫´n mutable).',
    level: 'junior',
    category: 'syntax',
  },
  {
    id: 3,
    question: 'Hoisting l√† g√¨ v√† ·∫£nh h∆∞·ªüng nh∆∞ th·∫ø n√†o ƒë·∫øn bi·∫øn?',
    answer:
      'Hoisting l√† c∆° ch·∫ø JavaScript "k√©o" declarations l√™n ƒë·∫ßu scope. var ƒë∆∞·ª£c hoisted v√† initialized v·ªõi undefined. let/const ƒë∆∞·ª£c hoisted nh∆∞ng kh√¥ng initialized, t·∫°o temporal dead zone. Function declarations ƒë∆∞·ª£c hoisted ho√†n to√†n.',
    level: 'mid',
    category: 'syntax',
  },
  {
    id: 4,
    question: 'Temporal Dead Zone (TDZ) l√† g√¨?',
    answer:
      'TDZ l√† kho·∫£ng th·ªùi gian t·ª´ khi scope b·∫Øt ƒë·∫ßu ƒë·∫øn khi let/const variable ƒë∆∞·ª£c declared. Trong TDZ, truy c·∫≠p variable s·∫Ω throw ReferenceError. TDZ gi√∫p ph√°t hi·ªán l·ªói s·ªõm v√† khuy·∫øn kh√≠ch declare before use.',
    level: 'mid',
    category: 'syntax',
  },
  {
    id: 5,
    question: 'Scope trong JavaScript ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o?',
    answer:
      'JavaScript c√≥ function scope (var) v√† block scope (let/const). Scope chain cho ph√©p inner scope truy c·∫≠p outer scope. Global scope accessible ·ªü m·ªçi n∆°i. Module scope trong ES6 modules. Lexical scoping x√°c ƒë·ªãnh scope t·∫°i compile time.',
    level: 'mid',
    category: 'basic',
  },
  {
    id: 6,
    question: 'Best practices khi ƒë·∫∑t t√™n bi·∫øn?',
    answer:
      'S·ª≠ d·ª•ng camelCase, t√™n c√≥ √Ω nghƒ©a v√† m√¥ t·∫£, tr√°nh abbreviations kh√¥ng r√µ r√†ng, consistency trong naming convention, s·ª≠ d·ª•ng const cho values kh√¥ng thay ƒë·ªïi, avoid reserved keywords, use English names.',
    level: 'junior',
    category: 'best-practices',
  },
  {
    id: 7,
    question: 'Global variables c√≥ nh·ªØng v·∫•n ƒë·ªÅ g√¨?',
    answer:
      'Global variables g√¢y pollution namespace, naming conflicts, kh√≥ debug, memory leaks, security issues, tight coupling. Best practice: minimize global scope, use modules, namespacing, IIFE pattern.',
    level: 'mid',
    category: 'best-practices',
  },
  {
    id: 8,
    question: 'Variable shadowing l√† g√¨?',
    answer:
      'Variable shadowing x·∫£y ra khi inner scope variable c√≥ t√™n tr√πng v·ªõi outer scope variable, "che" outer variable. C√≥ th·ªÉ g√¢y confusion v√† bugs. Avoid b·∫±ng c√°ch s·ª≠ d·ª•ng unique names ho·∫∑c lint rules.',
    level: 'mid',
    category: 'debugging',
  },
  {
    id: 9,
    question: 'Memory management v·ªõi variables nh∆∞ th·∫ø n√†o?',
    answer:
      'JavaScript c√≥ garbage collection t·ª± ƒë·ªông. Variables out of scope s·∫Ω ƒë∆∞·ª£c GC thu h·ªìi. Closures c√≥ th·ªÉ gi·ªØ references v√† prevent GC. Best practices: nullify references, avoid circular references, careful v·ªõi event listeners.',
    level: 'senior',
    category: 'performance',
  },
  {
    id: 10,
    question: 'Destructuring assignment v√† variables?',
    answer:
      'Destructuring cho ph√©p extract values t·ª´ arrays/objects v√†o variables. H·ªó tr·ª£ default values, rest patterns, nested destructuring. Gi√∫p code ng·∫Øn g·ªçn v√† readable h∆°n. C√≥ th·ªÉ combine v·ªõi function parameters.',
    level: 'mid',
    category: 'syntax',
  },
];

const codeExamples = {
  basic: `// Khai b√°o bi·∫øn c∆° b·∫£n
let userName = "Nguy·ªÖn VƒÉn A";
let userAge = 25;
let isActive = true;

console.log("T√™n:", userName);
console.log("Tu·ªïi:", userAge);
console.log("Tr·∫°ng th√°i:", isActive);`,

  comparison: `// So s√°nh var, let, const
var oldVar = "var c√≥ th·ªÉ redeclare";
var oldVar = "var m·ªõi"; // OK

let newLet = "let block-scoped";
// let newLet = "l·ªói"; // SyntaxError

const constant = "const kh√¥ng th·ªÉ reassign";
// constant = "l·ªói"; // TypeError`,

  scope: `// Demo scope
function demoScope() {
  var functionScoped = "function scope";

  if (true) {
    var functionScoped2 = "v·∫´n function scope";
    let blockScoped = "block scope";
    const alsoBlockScoped = "c≈©ng block scope";
  }

  console.log(functionScoped2); // OK
  // console.log(blockScoped); // ReferenceError
}`,

  practical: `// V√≠ d·ª• th·ª±c t·∫ø - Qu·∫£n l√Ω gi·ªè h√†ng
const STORE_NAME = "Shop ABC"; // H·∫±ng s·ªë
let totalItems = 0;
let totalPrice = 0;

function addToCart(itemName, price, quantity = 1) {
  console.log(\`Th√™m \${quantity} \${itemName} v√†o gi·ªè\`);
  totalItems += quantity;
  totalPrice += price * quantity;

  console.log(\`T·ªïng: \${totalItems} s·∫£n ph·∫©m - \${totalPrice}ƒë\`);
}

addToCart("√Åo thun", 150000, 2);
addToCart("Qu·∫ßn jean", 300000);`,
};

export default function VariableBasicsPage() {
  const [openFAQ, setOpenFAQ] = useState<number | null>(null);
  const [filterLevel, setFilterLevel] = useState<'all' | 'junior' | 'mid' | 'senior'>('all');
  const [filterCategory, setFilterCategory] = useState<'all' | string>('all');
  const [activeExample, setActiveExample] = useState<string>('basic');

  const toggleFAQ = (id: number) => {
    setOpenFAQ(openFAQ === id ? null : id);
  };

  const copyCode = async (code: string) => {
    await navigator.clipboard.writeText(code);
  };

  const runExample = (code: string) => {
    try {
      eval(code);
    } catch (error) {
      console.error('L·ªói khi ch·∫°y code:', error);
    }
  };

  const filteredFAQs = variableFAQs.filter(faq => {
    const levelMatch = filterLevel === 'all' || faq.level === filterLevel;
    const categoryMatch = filterCategory === 'all' || faq.category === filterCategory;
    return levelMatch && categoryMatch;
  });

  const getLevelColor = (level: string) => {
    switch (level) {
      case 'junior':
        return 'bg-green-100 text-green-800';
      case 'mid':
        return 'bg-yellow-100 text-yellow-800';
      case 'senior':
        return 'bg-red-100 text-red-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const getCategoryColor = (category: string) => {
    switch (category) {
      case 'basic':
        return 'bg-blue-100 text-blue-800';
      case 'syntax':
        return 'bg-purple-100 text-purple-800';
      case 'best-practices':
        return 'bg-pink-100 text-pink-800';
      case 'debugging':
        return 'bg-orange-100 text-orange-800';
      case 'performance':
        return 'bg-teal-100 text-teal-800';
      default:
        return 'bg-gray-100 text-gray-800';
    }
  };

  const CodeBlock = ({ code, title }: { code: string; title?: string }) => (
    <div className="bg-gray-50 rounded-lg border">
      {title && (
        <div className="px-4 py-2 bg-blue-50 rounded-t-lg border-b">
          <p className="text-sm text-blue-800 font-medium">{title}</p>
        </div>
      )}
      <div className="relative">
        <pre className="p-4 overflow-x-auto text-sm">
          <code className="language-javascript">{code}</code>
        </pre>
        <div className="absolute top-2 right-2 flex gap-2">
          <Button
            size="sm"
            variant="outline"
            onClick={() => copyCode(code)}
            className="h-8 w-8 p-0"
          >
            <Copy className="w-4 h-4" />
          </Button>
          <Button size="sm" onClick={() => runExample(code)} className="h-8 w-8 p-0">
            <Play className="w-4 h-4" />
          </Button>
        </div>
      </div>
    </div>
  );

  return (
    <JSLayout
      currentLesson="Gi·ªõi thi·ªáu v·ªÅ Bi·∫øn"
      tableOfContents={JS_TABLE_OF_CONTENTS}
      navigation={navigation}
      progress={progress}
    >
      <div className="space-y-12">
        {/* Hero Section */}
        <div className="text-center space-y-6">
          <Badge className="bg-gradient-to-r from-blue-500 to-purple-500 text-white px-6 py-3 text-lg">
            <Code className="w-5 h-5 mr-2" />
            JavaScript Variables
          </Badge>

          <h1 className="text-5xl font-bold text-gray-900" id="variable-introduction">
            üîß Gi·ªõi Thi·ªáu v·ªÅ Bi·∫øn trong JavaScript
          </h1>

          <p className="text-xl text-gray-600 max-w-4xl mx-auto leading-relaxed">
            Bi·∫øn l√† n·ªÅn t·∫£ng c∆° b·∫£n nh·∫•t trong l·∫≠p tr√¨nh JavaScript. Ch√∫ng cho ph√©p l∆∞u tr·ªØ, qu·∫£n l√Ω
            v√† thao t√°c d·ªØ li·ªáu trong ch∆∞∆°ng tr√¨nh c·ªßa b·∫°n.
          </p>
        </div>

        {/* What are Variables */}
        <section className="space-y-6">
          <h2
            className="text-3xl font-bold text-gray-900 flex items-center gap-3"
            id="what-are-variables"
          >
            <Settings className="w-8 h-8 text-blue-600" />
            Bi·∫øn l√† g√¨?
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <Card className="bg-gradient-to-br from-blue-50 to-purple-50 border-blue-200">
              <CardHeader>
                <CardTitle className="text-xl text-blue-800">ƒê·ªãnh nghƒ©a</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <p className="text-gray-700 leading-relaxed">
                  <strong>Bi·∫øn (Variable)</strong> l√† m·ªôt "h·ªôp ch·ª©a" c√≥ t√™n ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu trong
                  ch∆∞∆°ng tr√¨nh.
                </p>
                <ul className="space-y-2 text-gray-700">
                  <li>
                    ‚Ä¢ <strong>C√≥ t√™n:</strong> ƒê·ªÉ ph√¢n bi·ªát v·ªõi c√°c bi·∫øn kh√°c
                  </li>
                  <li>
                    ‚Ä¢ <strong>C√≥ gi√° tr·ªã:</strong> D·ªØ li·ªáu ƒë∆∞·ª£c l∆∞u tr·ªØ b√™n trong
                  </li>
                  <li>
                    ‚Ä¢ <strong>C√≥ th·ªÉ thay ƒë·ªïi:</strong> Gi√° tr·ªã c√≥ th·ªÉ c·∫≠p nh·∫≠t (v·ªõi let)
                  </li>
                  <li>
                    ‚Ä¢ <strong>C√≥ ki·ªÉu d·ªØ li·ªáu:</strong> S·ªë, chu·ªói, boolean, object...
                  </li>
                </ul>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-xl text-gray-800">V√≠ d·ª• th·ª±c t·∫ø</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="bg-blue-50 p-4 rounded-lg mb-4">
                  <p className="text-blue-800 text-sm">
                    üí° Gi·ªëng nh∆∞ m·ªôt chi·∫øc h·ªôp c√≥ nh√£n "Tu·ªïi c·ªßa t√¥i" ch·ª©a s·ªë 25. Khi sinh nh·∫≠t, b·∫°n
                    c√≥ th·ªÉ thay s·ªë th√†nh 26 m√† kh√¥ng ƒë·ªïi nh√£n.
                  </p>
                </div>
                <CodeBlock
                  code={`let age = 25;        // H·ªôp "age" ch·ª©a 25
let name = "An";     // H·ªôp "name" ch·ª©a "An"
let isStudent = true; // H·ªôp "isStudent" ch·ª©a true

console.log("T√¥i t√™n", name, "nƒÉm nay", age, "tu·ªïi");`}
                />
              </CardContent>
            </Card>
          </div>
        </section>

        {/* Why Use Variables */}
        <section className="space-y-6">
          <h2
            className="text-3xl font-bold text-gray-900 flex items-center gap-3"
            id="why-variables"
          >
            <Target className="w-8 h-8 text-blue-600" />
            T·∫°i sao c·∫ßn s·ª≠ d·ª•ng Bi·∫øn?
          </h2>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <Card className="bg-white shadow-lg hover:shadow-xl transition-shadow">
              <CardHeader className="text-center">
                <div className="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üíæ</span>
                </div>
                <CardTitle className="text-lg">L∆∞u tr·ªØ d·ªØ li·ªáu</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-center text-sm">
                  Gi·ªØ th√¥ng tin ƒë·ªÉ s·ª≠ d·ª•ng sau n√†y nh∆∞ t√™n user, ƒëi·ªÉm s·ªë, tr·∫°ng th√°i
                </p>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg hover:shadow-xl transition-shadow">
              <CardHeader className="text-center">
                <div className="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üîÑ</span>
                </div>
                <CardTitle className="text-lg">T√°i s·ª≠ d·ª•ng</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-center text-sm">
                  S·ª≠ d·ª•ng c√πng gi√° tr·ªã ·ªü nhi·ªÅu n∆°i m√† kh√¥ng c·∫ßn vi·∫øt l·∫°i
                </p>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg hover:shadow-xl transition-shadow">
              <CardHeader className="text-center">
                <div className="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üßÆ</span>
                </div>
                <CardTitle className="text-lg">T√≠nh to√°n</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-center text-sm">
                  Th·ª±c hi·ªán ph√©p to√°n v√† l∆∞u k·∫øt qu·∫£ ƒë·ªÉ x·ª≠ l√Ω ti·∫øp
                </p>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg hover:shadow-xl transition-shadow">
              <CardHeader className="text-center">
                <div className="w-16 h-16 bg-orange-100 rounded-full flex items-center justify-center mx-auto mb-4">
                  <span className="text-2xl">üéõÔ∏è</span>
                </div>
                <CardTitle className="text-lg">ƒêi·ªÅu khi·ªÉn</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-gray-600 text-center text-sm">
                  Thay ƒë·ªïi h√†nh vi ch∆∞∆°ng tr√¨nh d·ª±a tr√™n gi√° tr·ªã bi·∫øn
                </p>
              </CardContent>
            </Card>
          </div>

          <Card className="bg-white shadow-lg">
            <CardHeader>
              <CardTitle className="text-xl">So s√°nh: Kh√¥ng c√≥ bi·∫øn vs C√≥ bi·∫øn</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid md:grid-cols-2 gap-6">
                <div>
                  <h4 className="text-red-600 font-semibold mb-3">
                    ‚ùå Kh√¥ng c√≥ bi·∫øn (kh√≥ b·∫£o tr√¨)
                  </h4>
                  <CodeBlock
                    code={`console.log("Xin ch√†o Nguy·ªÖn VƒÉn A");
console.log("Tu·ªïi c·ªßa Nguy·ªÖn VƒÉn A: 25");
console.log("Email: nguyenvana@email.com");
// Mu·ªën ƒë·ªïi t√™n ph·∫£i s·ª≠a ·ªü nhi·ªÅu n∆°i!`}
                  />
                </div>
                <div>
                  <h4 className="text-green-600 font-semibold mb-3">‚úÖ C√≥ bi·∫øn (d·ªÖ b·∫£o tr√¨)</h4>
                  <CodeBlock
                    code={`let userName = "Nguy·ªÖn VƒÉn A";
let userAge = 25;
let userEmail = "nguyenvana@email.com";

console.log("Xin ch√†o " + userName);
console.log("Tu·ªïi c·ªßa " + userName + ": " + userAge);
console.log("Email: " + userEmail);`}
                  />
                </div>
              </div>
            </CardContent>
          </Card>
        </section>

        {/* Variable Declaration */}
        <section className="space-y-6">
          <h2
            className="text-3xl font-bold text-gray-900 flex items-center gap-3"
            id="variable-declaration"
          >
            <Lightbulb className="w-8 h-8 text-blue-600" />
            C√°ch khai b√°o Bi·∫øn
          </h2>

          <div className="space-y-6">
            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-xl">C√°c t·ª´ kh√≥a khai b√°o: let, const, var</CardTitle>
              </CardHeader>
              <CardContent className="space-y-6">
                <div className="grid md:grid-cols-3 gap-6">
                  <div className="bg-blue-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-blue-800 mb-2">üîπ let</h4>
                    <p className="text-sm text-blue-700 mb-3">Cho bi·∫øn c√≥ th·ªÉ thay ƒë·ªïi</p>
                    <div className="bg-white p-2 rounded text-xs">
                      <code>let userName = "An";</code>
                    </div>
                  </div>

                  <div className="bg-green-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-green-800 mb-2">üî∏ const</h4>
                    <p className="text-sm text-green-700 mb-3">Cho h·∫±ng s·ªë (kh√¥ng ƒë·ªïi)</p>
                    <div className="bg-white p-2 rounded text-xs">
                      <code>const PI = 3.14159;</code>
                    </div>
                  </div>

                  <div className="bg-yellow-50 p-4 rounded-lg">
                    <h4 className="font-semibold text-yellow-800 mb-2">üî∫ var</h4>
                    <p className="text-sm text-yellow-700 mb-3">C√°ch c≈© (√≠t khuy·∫øn kh√≠ch)</p>
                    <div className="bg-white p-2 rounded text-xs">
                      <code>var oldStyle = "c≈©";</code>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Interactive Code Examples */}
            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-xl">V√≠ d·ª• th·ª±c h√†nh</CardTitle>
                <div className="flex gap-2 mt-4">
                  {Object.keys(codeExamples).map(key => (
                    <Button
                      key={key}
                      size="sm"
                      variant={activeExample === key ? 'default' : 'outline'}
                      onClick={() => setActiveExample(key)}
                    >
                      {key === 'basic' && 'C∆° b·∫£n'}
                      {key === 'comparison' && 'So s√°nh'}
                      {key === 'scope' && 'Scope'}
                      {key === 'practical' && 'Th·ª±c t·∫ø'}
                    </Button>
                  ))}
                </div>
              </CardHeader>
              <CardContent>
                <CodeBlock code={codeExamples[activeExample as keyof typeof codeExamples]} />
              </CardContent>
            </Card>
          </div>
        </section>

        {/* Key Concepts */}
        <section className="space-y-6">
          <h2
            className="text-3xl font-bold text-gray-900 flex items-center gap-3"
            id="key-concepts"
          >
            <BookOpen className="w-8 h-8 text-blue-600" />
            Kh√°i ni·ªám quan tr·ªçng
          </h2>

          <div className="grid md:grid-cols-2 gap-6">
            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">üéØ Scope (Ph·∫°m vi)</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <div className="space-y-2">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-blue-500 rounded"></div>
                    <span className="text-sm">
                      <strong>Global:</strong> Truy c·∫≠p m·ªçi n∆°i
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-green-500 rounded"></div>
                    <span className="text-sm">
                      <strong>Function:</strong> Trong h√†m (var)
                    </span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 bg-purple-500 rounded"></div>
                    <span className="text-sm">
                      <strong>Block:</strong> Trong {`{}`} (let/const)
                    </span>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">‚ö° Hoisting</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                <p className="text-sm text-gray-600">
                  JavaScript "k√©o" khai b√°o bi·∫øn l√™n ƒë·∫ßu scope
                </p>
                <div className="space-y-2">
                  <div className="text-sm">
                    <strong>var:</strong> Hoisted + undefined
                  </div>
                  <div className="text-sm">
                    <strong>let/const:</strong> Hoisted + TDZ
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">üö´ Temporal Dead Zone</CardTitle>
              </CardHeader>
              <CardContent>
                <p className="text-sm text-gray-600">
                  Kho·∫£ng th·ªùi gian let/const ƒë∆∞·ª£c hoisted nh∆∞ng ch∆∞a th·ªÉ truy c·∫≠p, t·ª´ ƒë·∫ßu scope ƒë·∫øn
                  khi declared.
                </p>
              </CardContent>
            </Card>

            <Card className="bg-white shadow-lg">
              <CardHeader>
                <CardTitle className="text-lg">üìù Naming Convention</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                <div className="text-sm">
                  ‚úÖ camelCase: <code>userName</code>
                </div>
                <div className="text-sm">
                  ‚úÖ C√≥ √Ω nghƒ©a: <code>totalPrice</code>
                </div>
                <div className="text-sm">
                  ‚ùå Vi·∫øt t·∫Øt: <code>tp</code>, <code>usr</code>
                </div>
                <div className="text-sm">
                  ‚ùå T·ª´ kh√≥a: <code>class</code>, <code>function</code>
                </div>
              </CardContent>
            </Card>
          </div>
        </section>

        {/* Interview FAQ Section */}
        <section className="space-y-6">
          <div className="flex items-center justify-between">
            <h2
              className="text-3xl font-bold text-gray-900 flex items-center gap-3"
              id="interview-faqs"
            >
              <HelpCircle className="w-8 h-8 text-blue-600" />
              C√¢u h·ªèi ph·ªèng v·∫•n v·ªÅ Variables
            </h2>
            <Badge className="bg-blue-100 text-blue-800">{filteredFAQs.length} c√¢u h·ªèi</Badge>
          </div>

          {/* Filters */}
          <div className="flex flex-wrap gap-4 p-4 bg-gray-50 rounded-lg">
            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">Level:</span>
              <div className="flex gap-2">
                {['all', 'junior', 'mid', 'senior'].map(level => (
                  <Button
                    key={level}
                    size="sm"
                    variant={filterLevel === level ? 'default' : 'outline'}
                    onClick={() => setFilterLevel(level as any)}
                    className="text-xs"
                  >
                    {level === 'all' ? 'T·∫•t c·∫£' : level.charAt(0).toUpperCase() + level.slice(1)}
                  </Button>
                ))}
              </div>
            </div>

            <div className="flex items-center gap-2">
              <span className="text-sm font-medium">Category:</span>
              <div className="flex gap-2">
                {['all', 'basic', 'syntax', 'best-practices', 'debugging', 'performance'].map(
                  category => (
                    <Button
                      key={category}
                      size="sm"
                      variant={filterCategory === category ? 'default' : 'outline'}
                      onClick={() => setFilterCategory(category)}
                      className="text-xs"
                    >
                      {category === 'all' ? 'T·∫•t c·∫£' : category.replace('-', ' ')}
                    </Button>
                  )
                )}
              </div>
            </div>
          </div>

          {/* FAQ List */}
          <div className="space-y-4">
            {filteredFAQs.map(faq => (
              <Card key={faq.id} className="shadow-md hover:shadow-lg transition-shadow">
                <CardHeader>
                  <div className="flex items-start justify-between">
                    <div className="flex-1">
                      <div className="flex items-center gap-3 mb-2">
                        <Badge className={getLevelColor(faq.level)}>
                          {faq.level.toUpperCase()}
                        </Badge>
                        <Badge className={getCategoryColor(faq.category)}>
                          {faq.category.replace('-', ' ').toUpperCase()}
                        </Badge>
                      </div>
                      <CardTitle
                        className="text-lg cursor-pointer hover:text-blue-600 transition-colors"
                        onClick={() => toggleFAQ(faq.id)}
                      >
                        {faq.question}
                      </CardTitle>
                    </div>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => toggleFAQ(faq.id)}
                      className="ml-4"
                    >
                      {openFAQ === faq.id ? <ChevronUp /> : <ChevronDown />}
                    </Button>
                  </div>
                </CardHeader>

                {openFAQ === faq.id && (
                  <CardContent className="border-t bg-gray-50">
                    <p className="text-gray-700 leading-relaxed pt-4">{faq.answer}</p>
                  </CardContent>
                )}
              </Card>
            ))}
          </div>
        </section>

        {/* Summary */}
        <section className="bg-blue-50 border-l-4 border-blue-400 p-6 rounded-r-lg">
          <h3 className="font-bold text-blue-900 text-lg mb-3">üìù T√≥m t·∫Øt b√†i h·ªçc</h3>
          <ul className="space-y-2 text-blue-800">
            <li>‚Ä¢ Bi·∫øn l√† container c√≥ t√™n ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu</li>
            <li>‚Ä¢ S·ª≠ d·ª•ng let cho bi·∫øn thay ƒë·ªïi, const cho h·∫±ng s·ªë</li>
            <li>‚Ä¢ Hi·ªÉu v·ªÅ scope, hoisting v√† temporal dead zone</li>
            <li>‚Ä¢ ƒê·∫∑t t√™n bi·∫øn c√≥ √Ω nghƒ©a v√† theo convention</li>
            <li>‚Ä¢ Tr√°nh global variables v√† variable shadowing</li>
            <li>‚Ä¢ Bi·∫øn l√† n·ªÅn t·∫£ng ƒë·ªÉ h·ªçc c√°c concept JavaScript kh√°c</li>
          </ul>
        </section>
      </div>
    </JSLayout>
  );
}
