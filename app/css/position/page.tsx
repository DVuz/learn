'use client';

import { useState } from 'react';
import { Badge } from '@/components/ui/badge';
import { Move, Layers, Pin, ChevronDown, ChevronRight, Target, MousePointer } from 'lucide-react';
import CSSLayout from '../components/CSSLayout';
import { CSS_NAVIGATIONS, CSS_TABLE_OF_CONTENTS, getProgressForLesson } from '../constants/cssData';

const navigation = CSS_NAVIGATIONS['position'];
const progress = getProgressForLesson('position');

export default function CSSPositionPage() {
  const [expandedSections, setExpandedSections] = useState({
    staticPosition: true,
    relativePosition: false,
    absolutePosition: false,
    fixedPosition: false,
    stickyPosition: false,
    zIndexStacking: false,
  });

  type SectionKey = keyof typeof expandedSections;

  const toggleSection = (section: SectionKey) => {
    setExpandedSections(prev => ({
      ...prev,
      [section]: !prev[section],
    }));
  };

  const examples = {
    staticPosition: {
      css: `/* Static - V·ªã tr√≠ m·∫∑c ƒë·ªãnh */
.static-box {
  position: static; /* M·∫∑c ƒë·ªãnh */
  width: 120px;
  height: 50px;
  background: #14b8a6;
  margin: 10px 0;

  /* C√°c thu·ªôc t√≠nh n√†y KH√îNG ho·∫°t ƒë·ªông v·ªõi static */
  /* top: 20px;     ‚ùå Kh√¥ng c√≥ t√°c d·ª•ng */
  /* left: 30px;    ‚ùå Kh√¥ng c√≥ t√°c d·ª•ng */
  /* z-index: 999;  ‚ùå Kh√¥ng c√≥ t√°c d·ª•ng */
}`,
      html: `<div class="container">
  <div class="static-box">Box 1</div>
  <div class="static-box">Box 2</div>
  <div class="static-box">Box 3</div>
</div>`,
      result: (
        <div className="p-6 rounded-lg bg-teal-100 border-2 border-dashed border-teal-300">
          <div className="w-28 h-12 bg-teal-500 text-white flex items-center justify-center rounded mb-2 font-semibold">
            Box 1
          </div>
          <div className="w-28 h-12 bg-teal-500 text-white flex items-center justify-center rounded mb-2 font-semibold">
            Box 2
          </div>
          <div className="w-28 h-12 bg-teal-500 text-white flex items-center justify-center rounded font-semibold">
            Box 3
          </div>
        </div>
      ),
    },
    relativePosition: {
      css: `.relative-box {
  position: relative;
  width: 120px;
  height: 50px;
  background: #f97316;
  margin: 10px 0;
}

.moved {
  top: 20px;    /* Di chuy·ªÉn xu·ªëng 20px */
  left: 30px;   /* Di chuy·ªÉn ph·∫£i 30px */

  /* L∆∞u √Ω: V·ªã tr√≠ ban ƒë·∫ßu v·∫´n ƒë∆∞·ª£c "gi·ªØ ch·ªó" */
  /* C√°c element kh√°c kh√¥ng l·∫•p v√†o ch·ªó tr·ªëng */
}`,
      html: `<div class="container">
  <div class="relative-box">Box b√¨nh th∆∞·ªùng</div>
  <div class="relative-box moved">Box ƒë√£ di chuy·ªÉn</div>
</div>`,
      result: (
        <div className="p-6 rounded-lg bg-orange-100 border-2 border-dashed border-orange-300">
          <div className="w-28 h-12 bg-orange-500 text-white flex items-center justify-center rounded mb-2 font-semibold">
            Box b√¨nh th∆∞·ªùng
          </div>
          <div
            className="w-28 h-12 bg-orange-500 text-white flex items-center justify-center rounded mb-2 font-semibold relative"
            style={{ top: '20px', left: '30px' }}
          >
            Box ƒë√£ di chuy·ªÉn
          </div>
          <div className="w-28 h-12 bg-gray-400 text-white flex items-center justify-center rounded font-semibold text-xs">
            Static (kh√¥ng b·ªã ·∫£nh h∆∞·ªüng)
          </div>
        </div>
      ),
    },
    absolutePosition: {
      css: `.parent {
  position: relative; /* T·∫°o positioning context */
  height: 250px;
}

.absolute-box {
  position: absolute;
  width: 100px;
  height: 40px;
  background: #22c55e;
}

.top-left     { top: 10px; left: 10px; }
.top-right    { top: 10px; right: 10px; }
.bottom-center {
  bottom: 10px;
  left: 50%;
  transform: translateX(-50%);
}`,
      html: `<div class="parent">
  <div class="absolute-box top-left">Top Left</div>
  <div class="absolute-box top-right">Top Right</div>
  <div class="absolute-box bottom-center">Bottom Center</div>
  <p>Text n√†y kh√¥ng b·ªã ƒë·∫©y b·ªüi absolute boxes</p>
</div>`,
      result: (
        <div className="relative p-6 rounded-lg bg-green-100 border-2 border-dashed border-green-300 h-60">
          <div
            className="absolute w-20 h-8 bg-green-500 text-white flex items-center justify-center rounded font-semibold text-xs"
            style={{ top: '10px', left: '10px' }}
          >
            Top Left
          </div>
          <div
            className="absolute w-20 h-8 bg-green-500 text-white flex items-center justify-center rounded font-semibold text-xs"
            style={{ top: '10px', right: '10px' }}
          >
            Top Right
          </div>
          <div
            className="absolute w-20 h-8 bg-green-500 text-white flex items-center justify-center rounded font-semibold text-xs"
            style={{ bottom: '10px', left: '50%', transform: 'translateX(-50%)' }}
          >
            Bottom Center
          </div>
          <p className="mt-20 text-gray-700">Text n√†y kh√¥ng b·ªã ƒë·∫©y b·ªüi absolute boxes</p>
        </div>
      ),
    },
    fixedPosition: {
      css: `.fixed-box {
  position: fixed;
  top: 100px;      /* C√°ch top viewport 100px */
  right: 50px;     /* C√°ch right viewport 50px */
  width: 80px;
  height: 60px;
  background: #3b82f6;
  z-index: 1000;   /* ·ªû tr√™n c√πng */

  /* Th∆∞·ªùng th√™m shadow cho ƒë·∫πp */
  box-shadow: 0 4px 15px rgba(0,0,0,0.2);
}`,
      html: `<div class="fixed-box">Fixed</div>

<!-- Box n√†y s·∫Ω lu√¥n hi·ªÉn th·ªã ·ªü g√≥c m√†n h√¨nh -->`,
      result: (
        <div className="p-6 rounded-lg bg-blue-100 border-2 border-dashed border-blue-300 h-36 flex items-center justify-center text-lg text-gray-700">
          <div>
            <p>Nh√¨n g√≥c ph·∫£i m√†n h√¨nh! ‚Üí</p>
            <p className="text-sm mt-2">Box m√†u xanh s·∫Ω lu√¥n ·ªü ƒë√≥ khi cu·ªôn trang</p>
          </div>
        </div>
      ),
    },
    stickyPosition: {
      css: `.scrollable-container {
  height: 300px;
  overflow-y: auto;
}

.sticky-header {
  position: sticky;
  top: 0;
  background: #10b981;
  color: white;
  padding: 15px;
  z-index: 10;
}

/* Sticky ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o:
   1. Ban ƒë·∫ßu: Ho·∫°t ƒë·ªông nh∆∞ relative
   2. Khi scroll ƒë·∫øn ng∆∞·ª°ng: Chuy·ªÉn th√†nh fixed
   3. Khi scroll kh·ªèi container: Tr·ªü l·∫°i relative
*/`,
      html: `<div class="scrollable-container">
  <div class="sticky-header">üìå Sticky Header</div>
  <div class="content">
    <!-- N·ªôi dung d√†i ƒë·ªÉ cu·ªôn -->
  </div>
</div>`,
      result: (
        <div className="rounded-lg bg-emerald-100 border-2 border-dashed border-emerald-300 h-60 overflow-y-auto">
          <div className="sticky top-0 bg-emerald-500 text-white p-4 text-center font-semibold z-10">
            üìå Sticky Header - Cu·ªôn ƒë·ªÉ th·∫•y hi·ªáu ·ª©ng!
          </div>
          <div
            className="p-4 bg-gradient-to-b from-emerald-100 to-emerald-200 text-gray-800"
            style={{ height: '400px' }}
          >
            <h3 className="font-semibold mb-2">N·ªôi dung d√†i ƒë·ªÉ c√≥ th·ªÉ cu·ªôn</h3>
            <p className="mb-4">Header ·ªü tr√™n s·∫Ω "d√≠nh" khi b·∫°n cu·ªôn xu·ªëng.</p>
            <p className="font-semibold mb-2">Sticky ho·∫°t ƒë·ªông nh∆∞ th·∫ø n√†o:</p>
            <p className="mb-1">1. Ban ƒë·∫ßu: Ho·∫°t ƒë·ªông nh∆∞ relative</p>
            <p className="mb-1">2. Khi scroll ƒë·∫øn ng∆∞·ª°ng: Chuy·ªÉn th√†nh fixed</p>
            <p className="mb-4">3. Khi scroll kh·ªèi container: Tr·ªü l·∫°i relative</p>
            <p className="mb-2">R·∫•t h·ªØu √≠ch cho:</p>
            <p className="mb-1">‚Ä¢ Navigation headers</p>
            <p className="mb-1">‚Ä¢ Table headers</p>
            <p className="mb-1">‚Ä¢ Sidebars</p>
            <p>‚Ä¢ Call-to-action buttons</p>
          </div>
        </div>
      ),
    },
    zIndexStacking: {
      css: `.z-box {
  position: absolute; /* B·∫Øt bu·ªôc c√≥ position */
  width: 80px;
  height: 80px;
}

.box-1 {
  background: #f472b6;
  top: 20px; left: 20px;
  z-index: 1; /* Th·∫•p nh·∫•t */
}

.box-2 {
  background: #ec4899;
  top: 40px; left: 60px;
  z-index: 2; /* ·ªû gi·ªØa */
}

.box-3 {
  background: #db2777;
  top: 60px; left: 100px;
  z-index: 3; /* Cao nh·∫•t = ·ªü tr√™n c√πng */
}`,
      html: `<div class="container">
  <div class="z-box box-1">Z=1</div>
  <div class="z-box box-2">Z=2</div>
  <div class="z-box box-3">Z=3</div>
</div>`,
      result: (
        <div className="relative p-6 rounded-lg bg-pink-100 border-2 border-dashed border-pink-300 h-48">
          <div
            className="absolute w-16 h-16 bg-pink-300 flex items-center justify-center rounded-lg font-semibold text-white cursor-pointer"
            style={{ top: '20px', left: '20px', zIndex: 1 }}
          >
            Z=1
          </div>
          <div
            className="absolute w-16 h-16 bg-pink-500 flex items-center justify-center rounded-lg font-semibold text-white cursor-pointer"
            style={{ top: '40px', left: '60px', zIndex: 2 }}
          >
            Z=2
          </div>
          <div
            className="absolute w-16 h-16 bg-pink-700 flex items-center justify-center rounded-lg font-semibold text-white cursor-pointer"
            style={{ top: '60px', left: '100px', zIndex: 3 }}
          >
            Z=3
          </div>
        </div>
      ),
    },
  };

  interface Example {
    css: string;
    html: string;
    result: React.ReactNode;
  }

  const ExampleViewer = ({ example, title }: { example: Example; title: string }) => {
    const [activeTab, setActiveTab] = useState('css');

    return (
      <div className="border rounded-lg overflow-hidden bg-white shadow-sm">
        <div className="bg-gray-50 border-b p-3">
          <h4 className="font-semibold text-gray-800">{title}</h4>
        </div>

        <div className="flex border-b">
          {['css', 'html', 'result'].map(tab => (
            <button
              key={tab}
              onClick={() => setActiveTab(tab)}
              className={`px-4 py-2 text-sm font-medium border-r ${
                activeTab === tab
                  ? 'bg-blue-500 text-white'
                  : 'bg-gray-100 text-gray-600 hover:bg-gray-200'
              }`}
            >
              {tab === 'css' && 'CSS'}
              {tab === 'html' && 'HTML'}
              {tab === 'result' && 'K·∫øt qu·∫£'}
            </button>
          ))}
        </div>

        <div className="p-4">
          {activeTab === 'css' && (
            <pre className="bg-gray-900 text-green-400 p-4 rounded text-sm overflow-x-auto">
              <code>{example.css}</code>
            </pre>
          )}

          {activeTab === 'html' && (
            <pre className="bg-gray-900 text-blue-400 p-4 rounded text-sm overflow-x-auto">
              <code>{example.html}</code>
            </pre>
          )}

          {activeTab === 'result' && (
            <div className="border rounded p-4 bg-gray-50 min-h-24">{example.result}</div>
          )}
        </div>
      </div>
    );
  };

  interface SectionHeaderProps {
    id: string;
    title: string;
    icon: React.ElementType;
    isExpanded: boolean;
    onToggle: () => void;
  }

  const SectionHeader = ({ id, title, icon: Icon, isExpanded, onToggle }: SectionHeaderProps) => (
    <button
      onClick={onToggle}
      className="w-full flex items-center justify-between p-4 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors"
    >
      <div className="flex items-center gap-3">
        <Icon className="w-6 h-6 text-blue-600" />
        <h2 className="text-xl font-semibold text-gray-900">{title}</h2>
      </div>
      {isExpanded ? <ChevronDown className="w-5 h-5" /> : <ChevronRight className="w-5 h-5" />}
    </button>
  );

  return (
    <CSSLayout
      currentLesson="CSS Positioning"
      tableOfContents={CSS_TABLE_OF_CONTENTS}
      navigation={navigation}
      progress={progress}
    >
      {/* Fixed Demo Box */}
      <div className="fixed top-24 right-12 w-20 h-16 bg-blue-500 text-white flex items-center justify-center rounded-lg font-semibold z-50 shadow-lg animate-pulse">
        Fixed
      </div>

      <div className="space-y-8">
        {/* Header */}
        <div className="text-center space-y-4">
          <Badge className="bg-gradient-to-r from-purple-500 to-blue-600 text-white px-6 py-2 text-lg">
            <Target className="w-5 h-5 mr-2" />
            CSS Positioning
          </Badge>

          <h1 className="text-4xl font-bold text-gray-900" id="css-positioning">
            üéØ CSS Positioning
          </h1>

          <p className="text-xl text-gray-600 max-w-4xl mx-auto">
            H·ªçc c√°ch ki·ªÉm so√°t v·ªã tr√≠ c√°c element tr√™n trang web v·ªõi CSS positioning properties
          </p>
        </div>

        <div className="prose prose-lg max-w-none">
          {/* Static Position */}
          <div className="space-y-4">
            <SectionHeader
              id="staticPosition"
              title="Static Position - V·ªã tr√≠ m·∫∑c ƒë·ªãnh"
              icon={Move}
              isExpanded={expandedSections.staticPosition}
              onToggle={() => toggleSection('staticPosition')}
            />

            {expandedSections.staticPosition && (
              <div className="space-y-6 p-6 bg-white rounded-lg border">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center gap-2 mb-6" id="static-position">
                  <Move className="w-6 h-6 text-teal-600" />
                  Static Position - V·ªã tr√≠ m·∫∑c ƒë·ªãnh
                </h2>

                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 text-lg">
                    Static l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh c·ªßa thu·ªôc t√≠nh position. Elements v·ªõi position static s·∫Ω theo lu·ªìng b√¨nh th∆∞·ªùng c·ªßa t√†i li·ªáu.
                  </p>

                  <div className="bg-teal-50 p-6 rounded-lg">
                    <h4 className="font-semibold text-teal-900 mb-3">üìã ƒê·∫∑c ƒëi·ªÉm Static Position:</h4>
                    <ul className="text-teal-800 space-y-2">
                      <li>‚Ä¢ V·ªã tr√≠ m·∫∑c ƒë·ªãnh c·ªßa t·∫•t c·∫£ elements</li>
                      <li>‚Ä¢ Theo lu·ªìng b√¨nh th∆∞·ªùng c·ªßa trang</li>
                      <li>‚Ä¢ Kh√¥ng th·ªÉ d√πng top, left, right, bottom</li>
                      <li>‚Ä¢ Kh√¥ng th·ªÉ ƒë·∫∑t z-index</li>
                      <li>‚Ä¢ Kh√¥ng t·∫°o positioning context</li>
                    </ul>
                  </div>
                </div>

                <ExampleViewer example={examples.staticPosition} title="Static Position Example" />
              </div>
            )}
          </div>

          {/* Relative Position */}
          <div className="space-y-4">
            <SectionHeader
              id="relativePosition"
              title="Relative Position - V·ªã tr√≠ t∆∞∆°ng ƒë·ªëi"
              icon={MousePointer}
              isExpanded={expandedSections.relativePosition}
              onToggle={() => toggleSection('relativePosition')}
            />

            {expandedSections.relativePosition && (
              <div className="space-y-6 p-6 bg-white rounded-lg border">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center gap-2 mb-6" id="relative-position">
                  <MousePointer className="w-6 h-6 text-orange-600" />
                  Relative Position - V·ªã tr√≠ t∆∞∆°ng ƒë·ªëi
                </h2>

                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 text-lg">
                    Relative position cho ph√©p di chuy·ªÉn element t·ª´ v·ªã tr√≠ ban ƒë·∫ßu c·ªßa n√≥, nh∆∞ng v·∫´n gi·ªØ ch·ªó trong layout.
                  </p>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="bg-orange-50 p-6 rounded-lg">
                      <h4 className="font-semibold text-orange-900 mb-3">‚úÖ ∆Øu ƒëi·ªÉm:</h4>
                      <ul className="text-orange-800 space-y-2">
                        <li>‚Ä¢ Di chuy·ªÉn t·ª´ v·ªã tr√≠ ban ƒë·∫ßu</li>
                        <li>‚Ä¢ V·∫´n gi·ªØ ch·ªó trong layout</li>
                        <li>‚Ä¢ C√≥ th·ªÉ d√πng top, left, right, bottom</li>
                        <li>‚Ä¢ T·∫°o positioning context cho children</li>
                      </ul>
                    </div>

                    <div className="bg-amber-50 p-6 rounded-lg">
                      <h4 className="font-semibold text-amber-900 mb-3">‚ö†Ô∏è L∆∞u √Ω:</h4>
                      <ul className="text-amber-800 space-y-2">
                        <li>‚Ä¢ V·ªã tr√≠ ban ƒë·∫ßu v·∫´n ƒë∆∞·ª£c "gi·ªØ ch·ªó"</li>
                        <li>‚Ä¢ C√≥ th·ªÉ ch·ªìng l√™n c√°c element kh√°c</li>
                        <li>‚Ä¢ Kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn layout c·ªßa siblings</li>
                        <li>‚Ä¢ Th∆∞·ªùng d√πng l√†m container cho absolute</li>
                      </ul>
                    </div>
                  </div>
                </div>

                <ExampleViewer example={examples.relativePosition} title="Relative Position Example" />
              </div>
            )}
          </div>

          {/* Absolute Position */}
          <div className="space-y-4">
            <SectionHeader
              id="absolutePosition"
              title="Absolute Position - V·ªã tr√≠ tuy·ªát ƒë·ªëi"
              icon={Target}
              isExpanded={expandedSections.absolutePosition}
              onToggle={() => toggleSection('absolutePosition')}
            />

            {expandedSections.absolutePosition && (
              <div className="space-y-6 p-6 bg-white rounded-lg border">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center gap-2 mb-6" id="absolute-position">
                  <Target className="w-6 h-6 text-green-600" />
                  Absolute Position - V·ªã tr√≠ tuy·ªát ƒë·ªëi
                </h2>

                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 text-lg">
                    Absolute position lo·∫°i b·ªè element kh·ªèi lu·ªìng t√†i li·ªáu v√† ƒë·ªãnh v·ªã n√≥ so v·ªõi positioned parent g·∫ßn nh·∫•t.
                  </p>

                  <div className="bg-green-50 border-l-4 border-green-400 p-4 rounded-r-lg">
                    <h4 className="font-semibold text-green-800 mb-2">üí° Positioning Context:</h4>
                    <p className="text-green-700">
                      Element absolute s·∫Ω t√¨m parent c√≥ position kh√°c static (relative, absolute, fixed, sticky).
                      N·∫øu kh√¥ng t√¨m th·∫•y, n√≥ s·∫Ω ƒë·ªãnh v·ªã so v·ªõi viewport.
                    </p>
                  </div>
                </div>

                <ExampleViewer example={examples.absolutePosition} title="Absolute Position Example" />
              </div>
            )}
          </div>

          {/* Fixed Position */}
          <div className="space-y-4">
            <SectionHeader
              id="fixedPosition"
              title="Fixed Position - V·ªã tr√≠ c·ªë ƒë·ªãnh"
              icon={Pin}
              isExpanded={expandedSections.fixedPosition}
              onToggle={() => toggleSection('fixedPosition')}
            />

            {expandedSections.fixedPosition && (
              <div className="space-y-6 p-6 bg-white rounded-lg border">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center gap-2 mb-6" id="fixed-position">
                  <Pin className="w-6 h-6 text-blue-600" />
                  Fixed Position - V·ªã tr√≠ c·ªë ƒë·ªãnh
                </h2>

                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 text-lg">
                    Fixed position c·ªë ƒë·ªãnh element so v·ªõi viewport, kh√¥ng di chuy·ªÉn khi scroll trang.
                  </p>

                  <div className="bg-blue-50 p-6 rounded-lg">
                    <h4 className="font-semibold text-blue-900 mb-3">üéØ ·ª®ng d·ª•ng th·ª±c t·∫ø:</h4>
                    <ul className="text-blue-800 space-y-2">
                      <li>‚Ä¢ Header/Navigation c·ªë ƒë·ªãnh</li>
                      <li>‚Ä¢ Modal/Popup overlays</li>
                      <li>‚Ä¢ Floating action buttons</li>
                      <li>‚Ä¢ Cookie notices</li>
                      <li>‚Ä¢ Back to top buttons</li>
                    </ul>
                  </div>
                </div>

                <ExampleViewer example={examples.fixedPosition} title="Fixed Position Example" />
              </div>
            )}
          </div>

          {/* Sticky Position */}
          <div className="space-y-4">
            <SectionHeader
              id="stickyPosition"
              title="Sticky Position - V·ªã tr√≠ d√≠nh"
              icon={Layers}
              isExpanded={expandedSections.stickyPosition}
              onToggle={() => toggleSection('stickyPosition')}
            />

            {expandedSections.stickyPosition && (
              <div className="space-y-6 p-6 bg-white rounded-lg border">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center gap-2 mb-6" id="sticky-position">
                  <Layers className="w-6 h-6 text-emerald-600" />
                  Sticky Position - V·ªã tr√≠ d√≠nh
                </h2>

                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 text-lg">
                    Sticky position k·∫øt h·ª£p relative v√† fixed - element "d√≠nh" khi ƒë·∫°t ng∆∞·ª°ng ch·ªâ ƒë·ªãnh.
                  </p>

                  <div className="bg-emerald-50 p-6 rounded-lg">
                    <h4 className="font-semibold text-emerald-900 mb-3">üîÑ C√°ch ho·∫°t ƒë·ªông:</h4>
                    <ol className="text-emerald-800 space-y-2">
                      <li>1. <strong>Ban ƒë·∫ßu:</strong> Ho·∫°t ƒë·ªông nh∆∞ relative position</li>
                      <li>2. <strong>Khi scroll ƒë·∫øn ng∆∞·ª°ng:</strong> Chuy·ªÉn th√†nh fixed position</li>
                      <li>3. <strong>Khi scroll kh·ªèi container:</strong> Tr·ªü l·∫°i relative position</li>
                    </ol>
                  </div>
                </div>

                <ExampleViewer example={examples.stickyPosition} title="Sticky Position Example" />
              </div>
            )}
          </div>

          {/* Z-Index */}
          <div className="space-y-4">
            <SectionHeader
              id="zIndexStacking"
              title="Z-Index & Stacking Context"
              icon={Layers}
              isExpanded={expandedSections.zIndexStacking}
              onToggle={() => toggleSection('zIndexStacking')}
            />

            {expandedSections.zIndexStacking && (
              <div className="space-y-6 p-6 bg-white rounded-lg border">
                <h2 className="text-2xl font-semibold text-gray-900 flex items-center gap-2 mb-6" id="z-index">
                  <Layers className="w-6 h-6 text-pink-600" />
                  Z-Index & Stacking Context
                </h2>

                <div className="prose prose-lg max-w-none">
                  <p className="text-gray-700 text-lg">
                    Z-index ki·ªÉm so√°t th·ª© t·ª± ch·ªìng l·ªõp c·ªßa c√°c positioned elements tr√™n tr·ª•c Z.
                  </p>

                  <div className="grid md:grid-cols-2 gap-6">
                    <div className="bg-pink-50 p-6 rounded-lg">
                      <h4 className="font-semibold text-pink-900 mb-3">üìä Z-Index Rules:</h4>
                      <ul className="text-pink-800 space-y-2">
                        <li>‚Ä¢ S·ªë c√†ng cao c√†ng ·ªü tr√™n</li>
                        <li>‚Ä¢ Ch·ªâ ho·∫°t ƒë·ªông v·ªõi positioned elements</li>
                        <li>‚Ä¢ M·∫∑c ƒë·ªãnh: auto (th∆∞·ªùng = 0)</li>
                        <li>‚Ä¢ C√≥ th·ªÉ l√† s·ªë √¢m</li>
                      </ul>
                    </div>

                    <div className="bg-purple-50 p-6 rounded-lg">
                      <h4 className="font-semibold text-purple-900 mb-3">üèóÔ∏è Stacking Context:</h4>
                      <ul className="text-purple-800 space-y-2">
                        <li>‚Ä¢ T·∫°o b·ªüi position + z-index</li>
                        <li>‚Ä¢ Opacity  1</li>
                        <li>‚Ä¢ Transform, filter</li>
                        <li>‚Ä¢ Isolation: isolate</li>
                      </ul>
                    </div>
                  </div>
                </div>

                <ExampleViewer example={examples.zIndexStacking} title="Z-Index Example" />
              </div>
            )}
          </div>

          {/* Summary */}
          <div className="bg-gradient-to-r from-purple-50 to-blue-50 p-8 rounded-xl border">
            <h2 className="text-2xl font-bold text-gray-900 mb-4 text-center" id="tom-tat">
              üéØ T√≥m t·∫Øt CSS Positioning
            </h2>

            <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-6 mb-6">
              <div className="text-center">
                <div className="bg-green-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-3">
                  <Move className="w-8 h-8 text-green-600" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">Trong lu·ªìng</h3>
                <p className="text-sm text-gray-600">static, relative, sticky</p>
              </div>

              <div className="text-center">
                <div className="bg-red-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-3">
                  <Target className="w-8 h-8 text-red-600" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">Ngo√†i lu·ªìng</h3>
                <p className="text-sm text-gray-600">absolute, fixed</p>
              </div>

              <div className="text-center">
                <div className="bg-purple-100 w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-3">
                  <Layers className="w-8 h-8 text-purple-600" />
                </div>
                <h3 className="font-semibold text-gray-900 mb-2">Z-Index</h3>
                <p className="text-sm text-gray-600">Th·ª© t·ª± ch·ªìng l·ªõp</p>
              </div>
            </div>

            <div className="bg-yellow-50 border-l-4 border-yellow-400 p-4 rounded-r-lg">
              <p className="text-sm text-yellow-800">
                <strong>üí° M·∫πo:</strong> Ch·ªâ c√°c element c√≥ position kh√°c static m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng
                top, right, bottom, left v√† z-index.
              </p>
            </div>

            <div className="mt-6 text-center">
              <p className="text-gray-700 text-lg">
                Positioning l√† n·ªÅn t·∫£ng ƒë·ªÉ t·∫°o layout ph·ª©c t·∫°p v√† interactive! üöÄ
              </p>
            </div>
          </div>
        </div>
      </div>
    </CSSLayout>
  );
}
